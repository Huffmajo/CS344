#!/bin/bash
############################################
# Script - matrix
# Author - Joel Huffman
# Last updated - 1/26/2019
# Decsription - Script can calculate mean, 
# dimensions and transpose single matrices.
# Able to calculate the sum or product of 
# any two given matrices.
# Sources - p1gradingscript
############################################

############################################
# error - prints the string argument/error,
# sends stdout to stderr and exits 1
############################################
error() {
	echo $1 >&2
	exit 1
}

############################################
# dimensions [MATRIX] - accepts one matrix
# and prints the # of rows and # columns.
############################################
dims() {
	row=0
	col=0
	
	# count rows
	while read datafilepath
	do
		row=$((row + 1))
	done <$datafilepath

	#count columns
	col=$(tail -1 $1 | wc -w)

	#  print results
	echo "$row $col"
	exit 0
}

############################################
# transpose [MATRIX] - accepts one matrix
# and prints the transpose of that matrix.
############################################
transpose() {
	echo "transpose"
}

############################################
# mean [MATRIX] - accepts one matrix and 
# prints the mean of each columns numbers.
############################################
mean() {
	echo "mean"
}

############################################
# add [MATRIX_1] [MATRIX_2] - accepts 
# exactly 2 matrices and if they're valid,
# they print out the summed matrix.
############################################
add() {
	echo "add"
}

############################################
# multiply [MATRIX_1] [MATRIX_2] - accepts
# exaclty 2 matrices and if they're valid, 
# they print out the product matrix.
############################################
multiply() {
	echo "multiply"
}

# Create temp files
datafilepath="datafile$$"

# remove temp files when done
trap "rm -rf $datafilepath; trap - EXIT" INT HUP TERM EXIT

# Check if function requiring a single matrix
if [ $1 == "dims" ] || [ $1 == "mean" ] || [ $1 == "transpose" ]
then 
	# accept matrix through stdin or as file
	if [ $# -eq 1 ]
	then
		cat > "$datafilepath"
	elif [ $# -eq 2 ]
	then
		datafilepath=$2
	else
		error "Invalid number of arguments"
	fi

	# run dims function
	if [ $1 == "dims" ]
	then
		# confirm matrix is readable
		if [ -r $datafilepath ]
		then
			dims $datafilepath
			exit 0
		else
			error "input matrix not readable"
		fi
	fi

# Check for add function
elif [ $1 == "add" ]
then
	echo "Entered function: add"

# Check for multiply function
elif [ $1 == "multiply" ]
then
	echo "Entered function: multiply"

# If not one of the known functions print error
else
	error "Unknown function"
	exit 1
fi
