#!/bin/bash
############################################
# Script - matrix
# Author - Joel Huffman
# Last updated - 1/26/2019
# Description - Script can calculate mean, 
# dimensions and transpose single matrices.
# Able to calculate the sum or product of 
# any two given matrices.
# Sources - p1gradingscript
# https://ss64.com/bash/#
# https://www.thelinuxrain.com/articles/transposing-rows-and-columns-3-methods
# https://stackoverflow.com/questions/33047996/read-3-output-lines-into-3-variables-in-bash
############################################

############################################
# error - prints the string argument/error,
# sends stdout to stderr and exits 1
############################################
error() {
	echo $1 >&2
	exit 1
}

############################################
# dimensions [MATRIX] - accepts one matrix
# and prints the # of rows and # columns.
############################################
dims() {
	row=0
	col=0
	
	# count rows
	while read datafilepath
	do
		row=$((row + 1))
	done <$1

	# count columns
	col=$(tail -1 $1 | wc -w)

	# print results
	echo "$row $col"
}

############################################
# transpose [MATRIX] - accepts one matrix
# and prints the transpose of that matrix.
############################################
transpose() {
	# get number of columns + 1
	col=$(($(tail -1 $1 | wc -w)+1))
	
	# for each column 
	for ((i=1; i<col; i++))
	do
		# cut column and paste in temp file as row
		cut -f"$i" $1 | paste -s >> temptrans$$
	done
	
	cat temptrans$$
}

############################################
# mean [MATRIX] - accepts one matrix and 
# prints the mean of each columns numbers.
############################################
mean() {
	# transpose matrix for easier reading
	transpose $1 > tempmeanflip$$

	# read each "column"
	while read colasrow
	do
		num=0
		sum=0
		avg=0
		
		# get quantity of numbers and total sum from "column"
		for i in $colasrow
		do
			sum=$((sum + i))
			num=$((num + 1))
		done

		# get average for "column" with provided equation
		avg=$((($sum + (num/2) * ((sum>0) * 2 - 1)) / num))

		# append avg to temp file
		printf "%s\t" "$avg" >> tempmean$$

	done < tempmeanflip$$

	# remove last tab from temp file
	truncate -s-1 tempmean$$

	# print row of mean values
	cat tempmean$$
	echo
}

############################################
# add [MATRIX_1] [MATRIX_2] - accepts 
# exactly 2 matrices and if they're valid,
# they print out the summed matrix.
############################################
add() {
	# count total columns and track current column
	col=$(tail -1 $1 | wc -w)
	currcol=2

	# convert each matrix into a column for easy reading
	cat $1 | tr "\t" "\n" > tempmat1col$$
	cat $2 | tr "\t" "\n" > tempmat2col$$
 
	# read through both matrix columns simultaneously
	while read mat1 <&3 && read mat2 <&4
	do
		# append sum to temp file
		val=$((mat1 + mat2))
		printf "%s" $val >> tempadd$$

		# format resultant matrix in correct dimensions
		if [ $currcol -gt $col ]
		then
			printf "\n" >> tempadd$$			

			#reset current column for next line
			currcol=1
		else
			printf "\t" >> tempadd$$
		fi

		# iterate current column
		currcol=$((currcol + 1))
	done 3<tempmat1col$$ 4<tempmat2col$$
	
	# remove last tab from temp file
	truncate -s-1 tempadd$$

	# print result
	cat tempadd$$
	echo
}

############################################
# multiply [MATRIX_1] [MATRIX_2] - accepts
# exaclty 2 matrices and if they're valid, 
# they print out the product matrix.
############################################
multiply() {
	# transpose 2nd matrix for easier handling
	transpose $2 > tempmulttrans$$
	currcol=1
	currrow=0
	
	# put each line for both matrices in their own array
	while read -a mat1line
	do
		currrow=$((currrow + 1))
		# read every mat2 line for each mat1 line
		while read -a mat2line
		do
			product=0
			for ((i=0; i<mat1cols; i++))
			do
				work=$(( mat1line[i] * mat2line[i] ))
				product=$((product + work))
			done
			currcol=$((currcol + 1))			

			# check for tab or newline character
			if [ $currcol -gt $mat2cols ]
			then
				printf "%s\n" $product
				currcol=1
			else
				printf "%s\t" $product
			fi	
		done <tempmulttrans$$
	
	done <$1
	exit 0
}

# delete temp files when done
trap "rm -rf $datafilepath; rm -f data* temp*; trap - EXIT" INT HUP TERM EXIT

# Check if function requiring a single matrix
if [ $1 == "dims" ] || [ $1 == "mean" ] || [ $1 == "transpose" ]
then 
	# accept matrix through stdin or as file
	datafilepath="datafile$$"
	if [ $# -eq 1 ]
	then
		cat > "$datafilepath"
	elif [ $# -eq 2 ]
	then
		datafilepath=$2
	else
		error "Invalid number of arguments"
	fi

	# confirm matrix file is readable
	if [ -r $datafilepath ]
	then
		# run dims function
		if [ $1 == "dims" ]
		then
			dims $datafilepath
		# or run transpose function
		elif [ $1 == "transpose" ]
		then
			transpose $datafilepath
		# or run mean function
		elif [ $1 == "mean" ]
		then
			mean $datafilepath
		# or something has gone terribly wrong
		else
			error "Something went wrong"
		fi
	else
		error "input matrix not readable"
	fi

# Check for functions requiring 2 matrices
elif [ $1 == "add" ] || [ $1 == "multiply" ]
then
	#check if valid number of arguments
	if [ $# == 3 ]
	then
		# check both matrices are readable
		if [ -r $2 ] && [ -r $3 ]
		then
			# check to run add function
			if [ $1 == "add" ]
			then
				# get dimensions of matrices
				mat1dims=$(dims $2)
				mat2dims=$(dims $3)
				
				# compare dimensions to determine if able to add
				if [ "$mat1dims" == "$mat2dims" ]
				then
					add $2 $3
				else
					error "Matrices are of differing sizes and cannot be added"
				fi
			# check to run multiply function
			elif [ $1 == "multiply" ]
			then
				# get first matrix dimensions in individual variables
			 	mat1all=$(dims $2)
				mat1rows=$(echo $mat1all | cut -d " " -f 1)
				mat1cols=$(echo $mat1all | cut -d " " -f 2)

				# get second matrix dimensions in individual variables
			 	mat2all=$(dims $3)
				mat2rows=$(echo $mat2all | cut -d " " -f 1)
				mat2cols=$(echo $mat2all | cut -d " " -f 2)
				
				# compare matrix 1's columns to matrix 2's rows
				if [ "$mat1cols" == "$mat2rows" ]
				then
					multiply $2 $3
				else
					error "Matrix dimensions are not compatible for multiplication"
				fi
			else
				error "Something has gone wrong"
			fi
		else
			error "One or more files unable to be read"
		fi
	else
		error "Invalid number of arguments"
	fi

# If not one of the known functions print error
else
	error "Unknown function"
	exit 1
fi
