#!/bin/bash
############################################
# Script - matrix
# Author - Joel Huffman
# Last updated - 1/26/2019
# Description - Script can calculate mean, 
# dimensions and transpose single matrices.
# Able to calculate the sum or product of 
# any two given matrices.
# Sources - p1gradingscript
# https://www.thelinuxrain.com/articles/transposing-rows-and-columns-3-methods
# https://unix.stackexchange.com/questions/205788/throw-away-standard-output-and-error
############################################

############################################
# error - prints the string argument/error,
# sends stdout to stderr and exits 1
############################################
error() {
	echo $1 >&2
	exit 1
}

############################################
# dimensions [MATRIX] - accepts one matrix
# and prints the # of rows and # columns.
############################################
dims() {
	row=0
	col=0
	
	# count rows
	while read datafilepath
	do
		row=$((row + 1))
	done <$1

	#count columns
	col=$(tail -1 $1 | wc -w)

	# write row and col to temp dims file
	echo "$row $col" >> tempdims$$

	#  print results
	echo "$row $col"
}

############################################
# transpose [MATRIX] - accepts one matrix
# and prints the transpose of that matrix.
############################################
transpose() {

	# create or clear temp file
	> temptrans$$

	# get number of columns
	col=$(($(tail -1 $1 | wc -w)+1))
	
	# for each column 
	for ((i=1; i<col; i++))
	do
		cut -f"$i" $1 | paste -s >> temptrans
	done
	
	cat temptrans
}

############################################
# mean [MATRIX] - accepts one matrix and 
# prints the mean of each columns numbers.
############################################
mean() {
	# create or clear temp file
	> tempmeanflip$$
	> tempmean$$

	# get number of columns
	col=$(tail -1 $1 | wc -w)
	
	# transpose matrix for easier reading
	transpose $1 > tempmeanflip$$

	# read each line  
	while read colasrow
	do
		num=0
		sum=0
		avg=0
		
		# get "column" sum and number quantity
		for i in $colasrow
		do
			sum=$((sum + i))
			num=$((num + 1))
		done

		# get average with provided equation
		avg=$(((sum + (num/2) * ((sum>0) * 2 - 1)) / num))

		# append avg to temp file
		printf "%s\t" "$avg" >> tempmean$$

	done < tempmeanflip$$

	# remove last tab from temp file
	truncate -s-1 tempmean$$

	# print row of mean values
	cat tempmean$$
	echo
}

############################################
# add [MATRIX_1] [MATRIX_2] - accepts 
# exactly 2 matrices and if they're valid,
# they print out the summed matrix.
############################################
add() {
	echo "add"
}

############################################
# multiply [MATRIX_1] [MATRIX_2] - accepts
# exaclty 2 matrices and if they're valid, 
# they print out the product matrix.
############################################
multiply() {
	echo "multiply"
}

# delete temp files when done
trap "rm -rf $datafilepath temptrans; rm -f data* tempdims* temptrans* tempmean*; trap - EXIT" INT HUP TERM EXIT

# Check if function requiring a single matrix
if [ $1 == "dims" ] || [ $1 == "mean" ] || [ $1 == "transpose" ]
then 
	# accept matrix through stdin or as file
	datafilepath="datafile$$"
	if [ $# -eq 1 ]
	then
		cat > "$datafilepath"
	elif [ $# -eq 2 ]
	then
		datafilepath=$2
	else
		error "Invalid number of arguments"
	fi

	# confirm matrix file is readable
	if [ -r $datafilepath ]
	then
		# run dims function
		if [ $1 == "dims" ]
		then
			dims $datafilepath
		# or run transpose function
		elif [ $1 == "transpose" ]
		then
			transpose $datafilepath
		# or run mean function
		elif [ $1 == "mean" ]
		then
			mean $datafilepath
		# or something has gone terribly wrong
		else
			error "Something went wrong"
		fi
	else
		error "input matrix not readable"
	fi

# Check for functions requiring 2 matrices
elif [ $1 == "add" ] || [ $1 == "multiply" ]
then
	#check if valid number of arguments
	if [ $# -eq 3 ]
	then
		# check both matrices are readable
		if [ -r $2 ] && [ -r $3 ]
		then
			# check to run add function
			if [ $1 == "add" ]
			then
				###################################
				#CODE IN PROGRESS
				
				echo "pre dims 1 read"

				dims $2 &> /dev/null
				mat1dims="$(head -1 tempdims$$)"

				echo "post dims 1 read, pre dims 2 read"
				
				dims $3 &> /dev/null
				mat2dims="$(head -1 tempdims$$)"
				
				echo "after dims 2 read"
				echo "mat1: $mat1dims"
				echo "mat2: $mat2dims"

				######################################

				# compare dimensions to determine if able to add
				if [ "$mat1dims" == "$mat2dims" ]
				then
					add $2 $3
				else
					error "Matrices are of differing sizes and cannot be added"
				fi
			# check to run multiply function
			elif [ $1 == "multiply" ]
			then
				echo "need to write matrix size check for multiply here :)"
				#
				# NEED IF STATEMENT HERE TO CHECK IF MATRIX DIMENSIONS ARE COMPATIBLE
				#
			else
				error "Something has gone wrong"
			fi
		else
			error "One or more files unable to be read"
		fi
	else
		error "Invalid number of arguments"
	fi

# If not one of the known functions print error
else
	error "Unknown function"
	exit 1
fi
